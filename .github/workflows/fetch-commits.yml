name: Fetch vuejs Commits Data

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  workflow_dispatch: # Allow manual trigger

env:
  PUBLIC_REPO_OWNER: vuejs
  PUBLIC_REPO_NAME: core
  PRIVATE_REPO: ${{ secrets.REPO_SCOPED_TOKEN_USER }}/${{ secrets.REPO_SCOPED_TOKEN_REPO }} # Use secrets for private repo owner/name
  PRIVATE_REPO_BRANCH: vuejs # Or your desired branch
  COMMIT_EMAIL: github-actions[bot]@users.noreply.github.com
  COMMIT_USERNAME: github-actions[bot]

jobs:
  fetch_commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Private Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRIVATE_REPO }}
          token: ${{ secrets.GH_TOKEN }} # Use the provided token for checkout
          ref: ${{ env.PRIVATE_REPO_BRANCH }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Set up Git config
        run: |
          git config --global user.email "${{ env.COMMIT_EMAIL }}"
          git config --global user.name "${{ env.COMMIT_USERNAME }}"

      - name: Get date for 3 months ago
        id: date
        run: echo "DATE_ISO=$(date -d '3 months ago' -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Fetch Commits Data and Generate CSV
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SINCE_DATE: ${{ steps.date.outputs.DATE_ISO }}
          # Pass other env vars the script might need (already defined globally)
          PUBLIC_REPO_OWNER: ${{ env.PUBLIC_REPO_OWNER }}
          PUBLIC_REPO_NAME: ${{ env.PUBLIC_REPO_NAME }}
        run: python scripts/fetch_commits.py

      - name: Show Generated CSV Head
        run: head commits.csv

      - name: Commit and Push CSV
        run: |
          git add commits.csv
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update commits data ($(date -u +'%Y-%m-%d'))"
            # Add retry logic for push in case of transient network issues or conflicts
            git push origin ${{ env.PRIVATE_REPO_BRANCH }} || (sleep 5 && git pull --rebase origin ${{ env.PRIVATE_REPO_BRANCH }} && git push origin ${{ env.PRIVATE_REPO_BRANCH }})
          else
            echo "No changes to commit."
          fi 