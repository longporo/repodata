name: Fetch freeCodeCamp PR Lifecycle Data

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  PUBLIC_REPO_OWNER: freeCodeCamp
  PUBLIC_REPO_NAME: freeCodeCamp
  PRIVATE_REPO: ${{ secrets.REPO_SCOPED_TOKEN_USER }}/${{ secrets.REPO_SCOPED_TOKEN_REPO }}
  PRIVATE_REPO_BRANCH: freeCodeCamp # Or your desired branch
  COMMIT_EMAIL: github-actions[bot]@users.noreply.github.com
  COMMIT_USERNAME: github-actions[bot]

jobs:
  fetch-pr-lifecycle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Private Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRIVATE_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ env.PRIVATE_REPO_BRANCH }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-dateutil requests
          
      - name: Set DATE_RANGE env
        id: daterange
        run: |
          # Get the first day of the current month
          first_of_this_month=$(date -u +'%Y-%m-01')
          # Get the first day of 3 months ago
          first_of_3_months_ago=$(date -u -d "$first_of_this_month -3 months" +'%Y-%m-01')
          # Get the last day of the previous month
          last_of_prev_month=$(date -u -d "$first_of_this_month -1 day" +'%Y-%m-%d')
          export DATE_RANGE="$first_of_3_months_ago..$last_of_prev_month"
          echo "DATE_RANGE=$DATE_RANGE" >> $GITHUB_ENV
      
      - name: Set up Git config
        run: |
          git config --global user.email "${{ env.COMMIT_EMAIL }}"
          git config --global user.name "${{ env.COMMIT_USERNAME }}"

      - name: Fetch PRs Data and Generate CSV
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          # Pass other env vars the script might need (already defined globally)
          PUBLIC_REPO_OWNER: ${{ env.PUBLIC_REPO_OWNER }}
          PUBLIC_REPO_NAME: ${{ env.PUBLIC_REPO_NAME }}
          DATE_RANGE: ${{ env.DATE_RANGE }}
        run: python scripts/fetch_prs.py
      
      - name: Show Generated CSV Head
        run: head prs.csv

      - name: Commit and Push CSV
        run: |
          git add prs.csv
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update commits data ($(date -u +'%Y-%m-%d'))"
            # Add retry logic for push in case of transient network issues or conflicts
            git push origin ${{ env.PRIVATE_REPO_BRANCH }} || (sleep 5 && git pull --rebase origin ${{ env.PRIVATE_REPO_BRANCH }} && git push origin ${{ env.PRIVATE_REPO_BRANCH }})
          else
            echo "No changes to commit."
          fi 